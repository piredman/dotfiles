#!/usr/bin/env bash

print_section() {
    local title="$1"
    echo
    echo "==> $title"
}

print_step() {
    local message="$1"
    echo "  $message"
}

print_success() {
    local message="$1"
    echo "  ✓ $message"
}

print_error() {
    local message="$1"
    echo "  ✗ $message" >&2
}

check_prerequisites() {
    print_section "Checking Prerequisites"

    local missing_tools=()
    local required_tools=("paru" "git" "curl" "pacman" "yq")

    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &>/dev/null; then
            missing_tools+=("$tool")
        fi
    done

    if [ ${#missing_tools[@]} -gt 0 ]; then
        print_error "Missing required tools: ${missing_tools[*]}"
        echo
        echo "Please install the missing tools:"
        for tool in "${missing_tools[@]}"; do
            case "$tool" in
                "paru")
                    echo "  - paru: https://github.com/Morganamilo/paru#installation"
                    ;;
                "git")
                    echo "  - git: sudo pacman -S git"
                    ;;
                "curl")
                    echo "  - curl: sudo pacman -S curl"
                    ;;
                "pacman")
                    echo "  - pacman: should be available on Arch Linux"
                    ;;
                "yq")
                    echo "  - yq: paru -S yq"
                    ;;
            esac
        done
        return 1
    fi

    print_success "All prerequisites available"
    return 0
}

validate_environment() {
    print_section "Validating Environment"

    local missing_vars=()
    local required_vars=("HOME" "DOTFILES_DIR" "LIB_DIR" "BACKUP_DIR")

    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            missing_vars+=("$var")
        fi
    done

    if [ ${#missing_vars[@]} -gt 0 ]; then
        print_error "Missing required environment variables: ${missing_vars[*]}"
        return 1
    fi

    if [ -z "$XDG_CONFIG_HOME" ]; then
        export XDG_CONFIG_HOME="$HOME/.config"
        print_step "Set XDG_CONFIG_HOME=$XDG_CONFIG_HOME"
    fi

    mkdir -p "$LIB_DIR" "$BACKUP_DIR" "$XDG_CONFIG_HOME"
    print_success "Environment validated"
    return 0
}

