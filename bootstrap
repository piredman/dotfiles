#!/usr/bin/env bash

# =============================================================================
# Bootstrap Script for Fresh Arch Linux Installation
# =============================================================================
# Usage: curl -fsSL https://github.com/piredman/dotfiles/raw/main/bootstrap | bash
#
# This script sets up a fresh Arch Linux system with:
# - AUR helper (paru)
# - System updates and essential packages
# - User groups configuration
# - Dotfiles repository
# - Hands off to main setup script
# =============================================================================

set -euo pipefail

# =============================================================================
# CONSTANTS - URL Configuration
# =============================================================================

readonly USE_LOCAL_TESTING=true

if [[ "$USE_LOCAL_TESTING" == "true" ]]; then
    # Run a http server in dotfiles directory for lan curl calls
    # server> python -m http.server 8000
    # client> curl -fsSL http://x.x.x.x:8000/bootstrap | bash

    # Run a git daemon in home directory (ie: ~/) for lan git calls
    # server> git daemon --reuseaddr --base-path=. --export-all --verbose --enable=receive-pack

    # use timeshift to test without needing to reinstall arch.
    # client> curl -fsSL http://x.x.x.x:8000/install/setup-timeshift | bash

    # sudo timeshift --create --comments "clean install"
    # sudo timeshift --restore --skip-grub --yes

    readonly BASE_URL="http://x.x.x.x:8000"
    readonly DOTFILES_REPO="git://x.x.x.x/dotfiles"
    readonly RAW_BASE_URL="$BASE_URL"
else
    readonly BASE_URL="https://github.com/piredman/dotfiles"
    readonly DOTFILES_REPO="$BASE_URL.git"
    readonly RAW_BASE_URL="$BASE_URL/raw/main"
fi

# Other constants
readonly DOTFILES_DIR="$HOME/dotfiles"
readonly BOOTSTRAP_LOCK="$HOME/.dotfiles-bootstrap-complete"

# =============================================================================
# FUNCTIONS
# =============================================================================

print_banner() {
    echo
    echo "====================================================================="
    echo "  Arch Linux Dotfiles Bootstrap"
    echo "====================================================================="
    echo
}

print_section() {
    echo
    echo "==> $1"
}

print_step() {
    echo "  $1"
}

print_success() {
    echo "  ✓ $1"
}

print_error() {
    echo "  ✗ $1" >&2
}

print_warning() {
    echo "  ⚠ $1" >&2
}

check_package_installed() {
    pacman -Qi "$1" &>/dev/null
}

check_arch_linux() {
    if [ ! -f /etc/arch-release ]; then
        print_error "This script is designed for Arch Linux only"
        exit 1
    fi
    print_success "Running on Arch Linux"
}

check_bootstrap_status() {
    if [ -f "$BOOTSTRAP_LOCK" ]; then
        print_warning "Bootstrap appears to have run before"
        print_step "Lock file exists: $BOOTSTRAP_LOCK"
        echo
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_step "Bootstrap cancelled"
            exit 0
        fi
    fi
}

update_system() {
    print_section "Updating System"

    print_step "Updating package databases and upgrading system (this may take a while)"
    sudo pacman -Syu --noconfirm >/dev/null 2>&1

    print_success "System updated"
}

install_essential_packages() {
    print_section "Installing Essential Packages"

    local packages=(
        "curl"
        "git"
        "base-devel"
        "inetutils"
        "unzip"
        "wget"
        "which"
        "jq"
        "yq"
    )

    local to_install=()
    for pkg in "${packages[@]}"; do
        if ! check_package_installed "$pkg"; then
            to_install+=("$pkg")
        fi
    done

    if [ ${#to_install[@]} -gt 0 ]; then
        print_step "Installing: ${to_install[*]}"
        sudo pacman -S --noconfirm "${to_install[@]}" >/dev/null 2>&1
        print_success "Essential packages installed"
    else
        print_success "Essential packages already installed"
    fi
}

install_paru() {
    print_section "Installing AUR Helper (paru)"

    if command -v paru &>/dev/null; then
        print_success "Paru already installed"
        return 0
    fi

    print_step "Installing paru AUR helper"

    local PARU_REPO="https://aur.archlinux.org/paru.git"
    local BUILD_DIR="/tmp/paru-build-$$"

    # Build and install paru (dependencies already installed by install_essential_packages)
    print_step "Cloning paru repository"
    git clone "$PARU_REPO" "$BUILD_DIR" >/dev/null 2>&1

    print_step "Building paru (this may take a few minutes)"
    cd "$BUILD_DIR"
    makepkg -si --noconfirm

    # Cleanup
    rm -rf "$BUILD_DIR"

    # Verify installation
    if command -v paru &>/dev/null; then
        print_success "Paru installed successfully: $(paru --version | head -1)"
    else
        print_error "Paru installation failed"
        return 1
    fi
}

setup_zsh_shell() {
    print_section "Setting Up Zsh Shell"

    # Check if zsh is already the default shell
    if [[ "$SHELL" == *"zsh"* ]]; then
        print_success "Zsh already set as default shell"
        return 0
    fi

    # Install zsh if not present
    if ! command -v zsh &>/dev/null; then
        print_step "Installing zsh"
        sudo pacman -S --noconfirm zsh >/dev/null 2>&1
        print_success "Zsh installed"
    else
        print_success "Zsh already installed"
    fi

    local zsh_path
    zsh_path=$(command -v zsh)

    # Ensure zsh is in /etc/shells and create minimal config
    if ! grep -q "^$zsh_path$" /etc/shells; then
        print_step "Adding zsh to /etc/shells"
        echo "$zsh_path" | sudo tee -a /etc/shells >/dev/null
    fi

    if [ ! -f "$HOME/.zshrc" ]; then
        print_step "Creating minimal zsh configuration"
        cat >"$HOME/.zshrc" <<'EOF'
# Minimal zsh configuration to prevent first-run wizard
# This will be replaced by dotfiles setup later
autoload -U compinit && compinit
EOF
    fi

    # Change default shell and update environment
    print_step "Setting zsh as default shell"
    sudo chsh -s "$zsh_path" "$USER"
    export SHELL="$zsh_path"

    print_success "Zsh configured as default shell"
    print_warning "Zsh will be active for new login sessions"
}

enable_multilib() {
    print_section "Enabling Multilib Repository"

    if grep -q "^\[multilib\]" /etc/pacman.conf; then
        print_success "Multilib already enabled"
        return 0
    fi

    local PACMAN_CONF="/etc/pacman.conf"

    print_step "Creating backup and enabling multilib"
    sudo cp "$PACMAN_CONF" "${PACMAN_CONF}.backup.$(date +%Y%m%d_%H%M%S)"

    # Enable multilib
    if grep -q "^#\[multilib\]" "$PACMAN_CONF"; then
        sudo sed -i '/^#\[multilib\]/,/^#Include = \/etc\/pacman.d\/mirrorlist/ {
            s/^#\[multilib\]/[multilib]/
            s/^#Include = \/etc\/pacman.d\/mirrorlist/Include = \/etc\/pacman.d\/mirrorlist/
        }' "$PACMAN_CONF"
    else
        {
            echo ""
            echo "[multilib]"
            echo "Include = /etc/pacman.d/mirrorlist"
        } | sudo tee -a "$PACMAN_CONF" >/dev/null
    fi

    # Verify and update
    if grep -q "^\[multilib\]" "$PACMAN_CONF"; then
        print_step "Updating package databases"
        sudo pacman -Syy >/dev/null 2>&1
    else
        print_error "Failed to enable multilib"
        return 1
    fi

    print_success "Multilib enabled"
}

setup_user_groups() {
    print_section "Configuring User Groups"

    local groups=("video" "audio" "scanner" "storage" "optical")

    for group in "${groups[@]}"; do
        if ! groups "$USER" | grep -q "\b$group\b"; then
            print_step "Adding user to group: $group"
            sudo usermod -aG "$group" "$USER"
        fi
    done

    print_success "User groups configured"
    print_warning "You may need to log out and back in for group changes to take effect"
}

clone_dotfiles() {
    print_section "Setting Up Dotfiles Repository"

    if [ -d "$DOTFILES_DIR" ]; then
        print_step "Dotfiles directory exists, updating"
        cd "$DOTFILES_DIR"
        git pull
    else
        print_step "Cloning dotfiles repository"
        git clone "$DOTFILES_REPO" "$DOTFILES_DIR"
    fi

    chmod +x "$DOTFILES_DIR/setup"

    print_success "Dotfiles repository ready"
}

configure_hyprland_autoboot() {
    print_section "Configuring Hyprland Auto-login"

    # Disable SDDM
    print_step "Disabling SDDM"
    sudo systemctl disable sddm >/dev/null 2>&1
    print_success "SDDM disabled"

    # Create systemd override directory
    local override_dir="/etc/systemd/system/getty@tty1.service.d"
    sudo mkdir -p "$override_dir"

    # Create override.conf for auto-login
    print_step "Configuring getty auto-login"
    sudo tee "$override_dir/override.conf" >/dev/null <<EOF
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin $USER --noclear %I \$TERM
EOF

    # Reload systemd and enable getty@tty1
    sudo systemctl daemon-reload
    sudo systemctl enable getty@tty1 >/dev/null 2>&1

    print_success "Auto-login configured for user '$USER'"
}

mark_bootstrap_complete() {
    echo "Bootstrap completed: $(date)" >"$BOOTSTRAP_LOCK"
    print_success "Bootstrap marked as complete"
}

run_main_setup() {
    print_section "Running Main Setup"

    local setup_script="$DOTFILES_DIR/setup"

    if [ -f "$setup_script" ]; then
        print_step "Executing main setup script"
        cd "$DOTFILES_DIR"
        "$setup_script"
    else
        print_error "Main setup script not found"
        print_step "You can run it manually later with: cd ~/dotfiles && ./setup"
        return 1
    fi
}

print_completion() {
    print_section "Bootstrap Complete!"
    echo
    echo "Your Arch Linux system has been bootstrapped with:"
    echo "  ✓ System updates and essential packages"
    echo "  ✓ AUR helper (paru) and build tools"
    echo "  ✓ Zsh shell as default with minimal config"
    echo "  ✓ Multilib repository enabled"
    echo "  ✓ User groups configured (video, audio, storage, etc.)"
    echo "  ✓ Dotfiles repository cloned and setup script executed"
    echo "  ✓ Hyprland auto-login configured (SDDM disabled)"
    echo "  ✓ Directory structure and symlinks created"
    echo
    echo "System is ready! Next steps:"
    echo "  • Reboot to activate auto-login and group changes"
    echo "  • Hyprland will start automatically on login"
    echo "  • Run 'cd ~/dotfiles && ./setup' to reconfigure anytime"
    echo "  • Customize configurations in ~/dotfiles as needed"
    echo
}

# =============================================================================
# MAIN EXECUTION
# =============================================================================

main() {
    print_banner
    check_bootstrap_status

    update_system
    install_essential_packages
    install_paru
    setup_zsh_shell

    enable_multilib
    setup_user_groups
    clone_dotfiles
    configure_hyprland_autoboot

    mark_bootstrap_complete

    if run_main_setup; then
        print_completion
    else
        print_error "Main setup encountered issues, but bootstrap is complete"
        exit 1
    fi
}

# Run main function
main "$@"
